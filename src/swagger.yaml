openapi: 3.0.3
info:
  title: Voting-APIs
  description: >
    This Voting API allows users to register and log in using their Aadhar card numbers. Users can view a list of candidates and cast their votes, with the restriction that each user can vote only once. The API also provides live vote counts for candidates, displayed in sorted order. An admin can manage the candidate list but is not permitted to vote. Additionally, users can change their passwords, ensuring a secure voting environment.

    ## Features
      1. User sign-up, login, logout, and refresh-token functionality.
      2. View a comprehensive list of candidates.
      3. Vote for a candidate (limited to one vote per user).
      4. Access live vote counts for candidates, sorted by vote count.
      5. User data must include a unique government ID proof (Aadhar card number).
      6. Admin privileges to maintain the candidate list without voting rights.
      7. Users can update their passwords for enhanced security.
      8. Password reset functionality for forgotten credentials.
      9. Login using Aadhar card number and password.

  version: 1.3.1
  contact:
    name: karan Guatam
    email: karankumargautam.dev@gmail.com
    url: https://github.com/GautamKaran/Voting-api
servers:
  - url: ${{server}}

tags:
  - name: 🔐 User Authentication
    description: >-
      This section for APIs related to user signup, login, logout, and token refresh.
  - name: 🪪 User Profile
    description: >-
      This section for APIs related to user profile management.
  - name: 🗳️ Voting
    description: >-
      This section for APIs related to viewing candidates and voting for them.
  - name: 🚀 Vote Counts
    description: >-
      This section for APIs for retrieving candidate vote counts.
  - name: 🛡️ Admin Candidate Management
    description: >-
      This section for APIs for admin users to manage candidates.

paths:
  #============== User Authentication ========#
  /users/signup:
    post:
      tags:
        - 🔐 User Authentication

      summary: Sign-up API
      description: >-
        Allows users to sign up using their Aadhar card number, password, and other relevant details.
      operationId: signupUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: karan
                age:
                  type: integer
                  example: 20
                email:
                  type: string
                  example: user.email@domain.com
                aadharCardNumber:
                  type: integer
                  example: 123456789012
                address:
                  type: string
                  example: 123, ABC Street XYZ City
                mobileNumber:
                  type: integer
                  example: 9648775490
                role:
                  type: string
                  enum: [voter, admin]
                  example: voter # only one admin allowed
                password:
                  type: string
                  example: test@123
      responses:
        "201":
          description: User Signup successfully
        "400":
          description: >
            1. All fields are required.
            2. You are not eligible to vote.
            3. Aadhar Card Number must be exactly 12 digits.
            4. User with the same Aadhar Card Number already exists.
            5. Admin user already exists.
  /users/login:
    post:
      tags:
        - 🔐 User Authentication

      summary: Login to an existing account
      description: >-
        The API endpoint allows users to log into the application securely and
         also returns an access token.


         When accessing this endpoint with valid login credentials, users will
         receive an access token in the response.


         Additionally, the API endpoint securely sets the access token within the
         browser/client httpOnly cookies for future authentication and
         authorization purposes.

      operationId: LoginUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                aadharCardNumber:
                  type: integer
                  example: 123456789012
                password:
                  type: string
                  example: test@123
      responses:
        "201":
          description: User Sing-In Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  user:
                    type: object
                    properties:
                      signedInUser:
                        type: object
                        properties:
                          _id:
                            type: string
                            example: 66f9017c99ea80c3594e9b30
                          name:
                            type: string
                            example: karan
                          age:
                            type: number
                            example: 20
                          email:
                            type: string
                            example: user.email@domain.com
                          mobileNumber:
                            type: number
                            example: 9648775490
                          address:
                            type: string
                            example: 123, ABC Street XYZ City
                          aadharCardNumber:
                            type: number
                            example: 123456789012
                          role:
                            type: string
                            example: voter
                          isVoted:
                            type: bool
                            example: false
                          createdAt:
                            type: string
                            example: 2024-09-29T07:27:56.802Z
                          updatedAt:
                            type: string
                            example: 2024-09-29T07:48:36.242Z
                          _v:
                            type: number
                            example: 0
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmY5MDE3Yzk5ZWE4MGMzNTk0ZTliMzAiLCJlbWFpbCI6InVzZXIuZW1haWxAZG9tYWluLmNvbSIsImlhdCI6MTcyNzU5NjExNiwiZXhwIjoxNzI3NjgyNTE2fQ.GNHZCgzrOyHvBkyvCXFuCsBurNNWt200pRAaXbMy8Ho

                  refreshToken:
                    type: string
                    example: yJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NmY5MDE3Yzk5ZWE4MGMzNTk0ZTliMzAiLCJpYXQiOjE3Mjc1OTYxMTYsImV4cCI6MTcyODQ2MDExNn0._ArHPLsGbxd9aJbxIBdHTYjFGfGDOTgGqV750zNnA9c

                  message:
                    type: string
                    example: User Sing-In Successfully

        "400":
          description: >-
            Aadhar Card Number and password are required
        "401":
          description: >-
            Invalid Password !!
        "404":
          description: >-
            Invalid Aadhar Card Number
  /users/logout:
    get:
      tags:
        - 🔐 User Authentication

      summary: Logout from an existing account
      description: >-
        The API endpoint is responsible for logging out users from the
        application and destroying the access token cookies stored on the
        client-side.


        When accessing this endpoint, it triggers the logout process, revoking
        the user's authentication and terminating their active session.


        Additionally, it ensures that any access token cookies associated with
        the user's session are removed from the client's browser, effectively
        logging them out from the application.
      operationId: logoutUser
      responses:
        "200":
          description: Logout user successfully
        "404":
          description: Unauthorized request
  /users/refresh-token:
    post:
      tags:
        - 🔐 User Authentication
      summary: Refresh token
      description: >-
        The Refresh Access Token API is responsible for refreshing the access
        token when it expires.


        It allows you to make a request to this endpoint with the refresh token,
        which has a lengthy expiry time, to obtain a new access token.


        Simultaneously, the API sets the new access token in a cookie for future
        authentication purposes while replacing the expired one.


        This functionality ensures continuous access to protected resources by
        automatically renewing the access token **without requiring the user to
        reauthenticate manually**.


        By utilizing the refresh token, the API securely refreshes the access
        token and updates it in the cookie, ensuring seamless and uninterrupted
        access to authorized endpoints.
      operationId: refreshToken
      responses:
        "200":
          description: Refresh token
  #================= User Profile ==============#
  /users/profile:
    get:
      tags:
        - 🪪 User Profile

      summary: Retrieve the user's profile information
      description: >-
        The API endpoint is responsible for get login users profile information
      operationId: userProfile
      responses:
        "201":
          description: User Sing-In Successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userDetails:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 66f9017c99ea80c3594e9b30
                      name:
                        type: string
                        example: karan
                      age:
                        type: number
                        example: 20
                      email:
                        type: string
                        example: user.email@domain.com
                      mobileNumber:
                        type: number
                        example: 9648775490
                      address:
                        type: string
                        example: 123, ABC Street XYZ City
                      aadharCardNumber:
                        type: number
                        example: 123456789012
                      role:
                        type: string
                        example: voter
                      isVoted:
                        type: bool
                        example: false
                      createdAt:
                        type: string
                        example: 2024-09-29T07:27:56.802Z
                      updatedAt:
                        type: string
                        example: 2024-09-29T07:48:36.242Z
                      _v:
                        type: number
                        example: 0
  /users/profile/password:
    put:
      tags:
        - 🪪 User Profile

      summary: Retrieve the user's profile information
      description: >-
        The API endpoint is responsible for get login users profile information
      operationId: update-profile-passeword
      requestBody:
        description: >-
          Password change request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                  example: test@123
                newPassword:
                  type: string
                  example: 123@test
      responses:
        "200":
          description: Password changed successfully
        "400":
          description: nvalid old password
  /users/profile/forget-password:
    put:
      tags:
        - 🪪 User Profile

      summary: Forget the user's password
      description: >-
        Request to reset the password
      operationId: forget-passeword
      requestBody:
        description: >-
          Forget the user's password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aadharCardNumber:
                  type: string
                  example: 123456789012
      responses:
        "200":
          description: Please check your inbox for the email.
        "400":
          description: Invalid Aadhar Card Number
        "500":
          description: internal server error
  /users/reset-password:
    put:
      tags:
        - 🪪 User Profile

      summary: Forget the user's password
      description: >-
        Request to reset the password
      operationId: reset-passeword
      requestBody:
        description: >-
          Forget the user's password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                aadharCardNumber:
                  type: string
                  example: 123456789012
                otp:
                  type: string
                  example: 123456789012
                newPassword:
                  type: string
                  example: 123456789012
      responses:
        "200":
          description: Please check your inbox for the email.
        "400":
          description: Invalid Aadhar Card Number
        "500":
          description: internal server error
 
  # ================== Voting ==================#
  /candidate/lists/:
    get:
      tags:
        - 🗳️ Voting
      summary: Retrieve the list of candidates
      description: >-
        Allows users get lista of candidates to vote them.
      operationId: listOfCondidates
      responses:
        "201":
          description: Candidate Created Successfully
        "401":
          description: No candidates registered
        "500":
          description: internal Server error
  /candidate/vote/{candidateID}:
    get:
      tags:
        - 🗳️ Voting
      summary: Vote for a specific candidate
      description: >-
        Allows voter to vote for their specific candidate.
      operationId: voteForCandidates
      parameters:
        - name: candidateID
          in: path
          required: true
          schema:
            type: string
            example: 1
      responses:
        "200":
          description: Vote cast successfully
        "404":
          description: Candidate not found

  # ================= Vote Counts ===============#
  /candidate/votes/count:
    get:
      tags:
        - 🚀 Vote Counts

      summary: Get the list of candidates sorted by vote counts
      description: >-
        The API endpoint is List of candidates sorted by votes
      operationId: voteCount
      responses:
        "201":
          description: vote count

  #============ Admin Candide Management ==========#
  /candidate:
    post:
      tags:
        - 🛡️ Admin Candidate Management
      summary: Create a new candidate.
      description: >-
        Only admin create ne Candidate for vote
      operationId: condidate
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Modi
                party:
                  type: string
                  example: BJP
                age:
                  type: integer
                  example: 60

      responses:
        "200":
          description: Candidate Created Successfully
        "403":
          description: Access denied
        "400":
          description: All fields are required
        "500":
          description: Internal server error

  /candidate/update/{candidateID}:
    put:
      tags:
        - 🛡️ Admin Candidate Management
      summary: Update an existing candidate
      description: >-
        Allows admin update condidate details and that will refelate in condidate lists.
      operationId: upadateCandidates
      parameters:
        - name: candidateID
          in: path
          required: true
          schema:
            type: string
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Medi
                party:
                  type: string
                  example: BJP
                age:
                  type: integer
                  example: 69

      responses:
        "200":
          description: Candidate updated successfully
        "404":
          description: Candidate not found

  /candidate/delete/{candidateID}:
    delete:
      tags:
        - 🛡️ Admin Candidate Management
      summary: delete an existing candidate
      description: >-
        Allows admin delete condidate details and that will refelate in condidate lists.
      operationId: deleteCandidates
      parameters:
        - name: candidateID
          in: path
          required: true
          schema:
            type: string
            example: 1

      responses:
        "200":
          description: Candidate updated successfully
        "404":
          description: Candidate not found
